from aiogram import Router, F 
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession


from ..tools.decorators import db_session_decorator, check_user_decorator
from ..states import Assistant
from ..ui import menu, start_to_menu
from ..schemas import ShowUserResponse

router = Router()

@router.message(Command("start"))
@db_session_decorator
@check_user_decorator
async def start_handler(message: Message, db: AsyncSession, user: ShowUserResponse, state: FSMContext):
    try:
        await state.clear()
        await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–± –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üòå", reply_markup=start_to_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer(
            text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
        )


@router.callback_query(F.data == "menu")
@router.message(Command("menu"))
async def menu_handler(invoice: Message | CallbackQuery, state: FSMContext): 
    await state.set_state(Assistant.task_manager)
    if hasattr(invoice, "data"): 
        message = invoice.message
    else: 
        message = invoice

    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ üëá",
        reply_markup=menu()
    )
